.form {
  &__group:not(:last-child) {
    margin-bottom: 3rem;
  }

  &__input {
    // The browser actually overwrites the font family we universally set (and properties as well)
    // // So we must reapply it again, in this case, telling it to inherit what we set forcefully
    font-family: inherit;
    color: inherit;

    font-size: 1.5rem;

    // Alway more padding on the sides for form inputs because it looks better
    padding: 1.5rem 2rem;

    border-radius: 2px;

    background-color: rgba($color-white, 0.8);

    border: none;

    // Add border here as well to present the above element pushing the below element down when clicked
    // // Set to transparent to not be visible at this state
    border-bottom: 3px solid transparent;

    width: 90%;

    display: block;

    @include respond(tab-port) {
      width: 100%;
    }

    &:focus {
      // Try removing this to see what happens when we click in the input
      // // red Never set the focus style to absolutely nothing red
      // // // red It is important for people that only use a keyboard, accessibility reasons

      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;
    }

    // Style when credentials given are invalid with the ip of input
    &:focus:invalid {
      border-bottom: 3px solid $color-secondary-dark;
    }

    // orangered Selector used to style a placeholder orangered
    &::-webkit-input-placeholder {
      color: $color-gray-dark-2;
    }
  }

  &__label {
    font-size: 1.3rem;
    font-weight: 900;

    // We cannot use this block model properties in a non block display element
    margin-left: 2rem;
    margin-top: 0.7rem;

    // So we must apply it here
    display: block;

    transition: all 0.3s;
  }

  // Selects any input that is currently displaying a placeholder (placeholders disappear whe the element is focused
  // // Here we have to use the adjacent sibling selector
  // // // This selector makes it possible to select the element that comes immediately after the element which was selected first (&__input in this case)
  // // // // This selector works only if both the selected elements are children of the same parent and come immediately one another
  // // // // // Not to be mistaken with the general sibling selector ~ (This one does not require that the elements are located next to each other)
  &__input:placeholder-shown + &__label {
    // the visibility property need to be set to hidden for the element to really vanish from the page
    // // Opacity must be set still because, unlike the forme, the visibility property cannot be animated
    opacity: 0;
    visibility: hidden;

    transform: translateY(-4rem);
  }

  &__radio-group {
    width: 49%;
    display: inline-block;

    @include respond(tab-port) {
      width: 100%;
      margin-bottom: 1rem;
    }
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;

    position: relative;

    padding-left: 4rem;
  }

  // We will hide the default radio circle
  &__radio-input {
    // Does not work, the circle footprint is still at the document
    // visibility: hidden;

    // THe following property actually liberates the space that this circle was occupying
    display: none;

    // red TEST TO SEE THE DIFFERENCE BETWEEN THE TEU SETTINGS ABOVE red
  }

  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary-dark;
    border-radius: 50%;

    // Must be a block/inline block element to be able to have the properties defined above
    display: inline-block;

    position: absolute;

    left: 0;
    top: -0.5rem;

    // The circle thar fills the inside when selected
    &::after {
      // Every time we use a pseudo-element, we must specify its content and display property
      content: "";

      display: block;

      height: 1.3rem;
      width: 1.3rem;

      border-radius: 50%;

      // The parent element have position set to absolute as well, it does not need to be set to relative for this to work
      position: absolute;

      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);

      background-color: $color-primary-dark;

      opacity: 0;

      transition: opacity 0.1s;
    }
  }

  // Style the radio button circle for when we select that option
  // // Instead of focus or active, the selector here is "checked"
  // // // Could have used sibling selector ~ instead of +
  &__radio-input:checked + &__radio-label &__radio-button::after {
    opacity: 1;
  }
}
